'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var COMPOSE_DEEPLY = 'deeply';
var COMPOSE_SOFTLY = 'softly';
var DONT_COMPOSE = false;

var DEFAULT_OPTIONS = {
  composeTheme: COMPOSE_DEEPLY,
  withRef: false
};

exports.default = function (componentName, localTheme) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  return function (ThemedComponent) {
    var _class, _temp;

    var _DEFAULT_OPTIONS$opti = _extends({}, DEFAULT_OPTIONS, options);

    var optionComposeTheme = _DEFAULT_OPTIONS$opti.composeTheme;
    var optionWithRef = _DEFAULT_OPTIONS$opti.withRef;

    validateComposeOption(optionComposeTheme);
    return _temp = _class = function (_Component) {
      _inherits(Themed, _Component);

      function Themed() {
        _classCallCheck(this, Themed);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Themed).apply(this, arguments));
      }

      _createClass(Themed, [{
        key: 'getWrappedInstance',
        value: function getWrappedInstance() {
          (0, _invariant2.default)(optionWithRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the third argument of the themr() call.');

          return this.refs.wrappedInstance;
        }
      }, {
        key: 'getThemeNotComposed',
        value: function getThemeNotComposed() {
          if (this.props.theme) return this.props.theme;
          if (localTheme) return localTheme;
          return this.getContextTheme();
        }
      }, {
        key: 'getContextTheme',
        value: function getContextTheme() {
          return this.context.themr ? this.context.themr.theme[componentName] : {};
        }
      }, {
        key: 'getTheme',
        value: function getTheme() {
          return this.props.composeTheme === COMPOSE_SOFTLY ? Object.assign({}, this.getContextTheme(), localTheme, this.props.theme) : themeable(themeable(this.getContextTheme(), localTheme), this.props.theme);
        }
      }, {
        key: 'render',
        value: function render() {
          var _props = this.props;
          var composeTheme = _props.composeTheme;

          var rest = _objectWithoutProperties(_props, ['composeTheme']);

          var renderedElement = void 0;

          if (optionWithRef) {
            renderedElement = _react2.default.createElement(ThemedComponent, _extends({}, rest, {
              ref: 'wrappedInstance',
              theme: composeTheme ? this.getTheme() : this.getThemeNotComposed()
            }));
          } else {
            renderedElement = _react2.default.createElement(ThemedComponent, _extends({}, rest, {
              theme: composeTheme ? this.getTheme() : this.getThemeNotComposed()
            }));
          }

          return renderedElement;
        }
      }]);

      return Themed;
    }(_react.Component), _class.displayName = 'Themed ' + ThemedComponent.name, _class.contextTypes = {
      themr: _react.PropTypes.object
    }, _class.propTypes = {
      composeTheme: _react.PropTypes.oneOf([COMPOSE_DEEPLY, COMPOSE_SOFTLY, DONT_COMPOSE]),
      theme: _react.PropTypes.object
    }, _class.defaultProps = {
      composeTheme: optionComposeTheme
    }, _temp;
  };
};

function themeable() {
  var style = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var theme = arguments[1];

  if (!theme) return style;
  return [].concat(_toConsumableArray(Object.keys(theme)), _toConsumableArray(Object.keys(style))).reduce(function (result, key) {
    return typeof theme[key] === 'string' && style[key] && theme[key].indexOf(style[key]) === -1 ? _extends({}, result, _defineProperty({}, key, style[key] + ' ' + theme[key])) : _extends({}, result, _defineProperty({}, key, theme[key] || style[key]));
  }, {});
}

function validateComposeOption(composeTheme) {
  if ([COMPOSE_DEEPLY, COMPOSE_SOFTLY, DONT_COMPOSE].indexOf(composeTheme) === -1) {
    throw new Error('Invalid composeTheme option for react-css-themr. Valid composition options are ' + COMPOSE_DEEPLY + ', ' + COMPOSE_SOFTLY + ' and ' + DONT_COMPOSE + '. The given option was ' + composeTheme);
  }
}